<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ruby on Lukáš Zapletal</title><link>https://blog.zapletalovi.com/tags/ruby/</link><description>Recent content in ruby on Lukáš Zapletal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 07 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.zapletalovi.com/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Human readable name generator</title><link>https://blog.zapletalovi.com/posts/2016-03-07-human-readable-name-generator/</link><pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2016-03-07-human-readable-name-generator/</guid><description>Out of ideas for incoming bare-metal host names in your cluster? I wrote a little generator which contains frequently occurring given names and surnames from the 1990 US Census (public domain data):
256 (8 bits) unique male given names 256 (8 bits) unique female given names 65,536 (16 bits) unique surnames Given names were filtered to be 3-5 characters long, surnames 5-8 characters, therefore generated names are never longer than 14 characters (5+1+8).</description></item><item><title>Ruby 1.9 MRI vs Google Dart 0.2 TP</title><link>https://blog.zapletalovi.com/posts/2012-11-07-ruby-19-mri-vs-google-dart-02-tp/</link><pubDate>Wed, 07 Nov 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-11-07-ruby-19-mri-vs-google-dart-02-tp/</guid><description>Ok, I know I know. Those are not tests, but I was just trying out Dart language tonight and I wanted to share this. Such a young language, but driven by V8 Google team, is that fast.
This is my Ruby version compiled about four weeks ago. By MRI I mean Matz Reference Implementation, the widely used Ruby VM. There are more and faster, but not much.
$ ruby --version ruby 1.</description></item><item><title>Peek into your Ruby app with SystemTap</title><link>https://blog.zapletalovi.com/posts/2012-02-02-peek-into-your-ruby-app-with-systemtap/</link><pubDate>Thu, 02 Feb 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-02-02-peek-into-your-ruby-app-with-systemtap/</guid><description>I already wrote about using SystemTap with Ruby. Today I want to extend the last example I linked at the very end of my article. It's a nice example script of Ruby "top" utility.
Today I was investigating our Katello unit test codebase. We have over 1600 examples and the number is rising every day. The whole run is about seven minutes long. The utility gives very nice first look on the app showing the top Ruby calls.</description></item><item><title>Lazy logger levels</title><link>https://blog.zapletalovi.com/posts/2012-01-30-lazy-logger-levels/</link><pubDate>Mon, 30 Jan 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-01-30-lazy-logger-levels/</guid><description>Developers are lazy guys. They tend to make their lifes easier. I do it everyday. I never miss an opportunity to write a shell script or a shell bit instead of renaming 10+ files. Even when I know it will take exactly the same time as for the manual approach.
Every software piece in the world, I hope, have some decent logging. Those stacks offer various logging levels, such as debug, info, warn, error, and fatal taking Ruby on Rails as an example.</description></item><item><title>Probing Ruby apps with SystemTap in RHEL 6</title><link>https://blog.zapletalovi.com/posts/2012-01-05-probing-ruby-apps-with-systemtap-in/</link><pubDate>Thu, 05 Jan 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-01-05-probing-ruby-apps-with-systemtap-in/</guid><description>There is one small'n'hidden feature of RHEL 6.2 that popped up recently as an enhancement errata (RHSA-2011-1581). With this update, SystemTap probes have been added to the Ruby package. I was waiting for this feature, because at the time I was reading Aaron Patterson's excelent articleabout Ruby probing, this was not possible in Fedora or Red Hat Enterprise Linux by default. I mean without compilation and installation of DTrace or SystemTap.</description></item><item><title>Anatomy of Ruby Exception</title><link>https://blog.zapletalovi.com/posts/2011-11-28-anatomy-of-ruby-exception/</link><pubDate>Mon, 28 Nov 2011 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2011-11-28-anatomy-of-ruby-exception/</guid><description>Today I was trying to find how to properly override Ruby standard Exception. To my surprise, I was not able to find any tutorial or even paragraph about it. No recommendations, no design patterns. Everything was the same:
class MyError &amp;lt; StandardError; end
As a Java guy, I tend to encapsulate lots of things into Exceptions. It's not a bad thing, actually it is a good thing. So I asked myself - what should I override, how, and why?</description></item><item><title>Start using Ruby RVM on RHEL 6</title><link>https://blog.zapletalovi.com/posts/2011-11-12-start-using-ruby-rvm-on-rhel-6/</link><pubDate>Sat, 12 Nov 2011 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2011-11-12-start-using-ruby-rvm-on-rhel-6/</guid><description>Rubyists know RVM very well, I tried it several times. This time I am doing on RHEL 6. The installation instructions from the RVM site differs slightly when applied on a RHEL box, so here is my tutorial. I extended the process a bit with some tunings. As you will see I will create a dedicated user (running it on a server box) and configure everything slightly. Let's go.</description></item><item><title>Uninstall all the gems</title><link>https://blog.zapletalovi.com/posts/2011-06-21-uninstall-all-gems/</link><pubDate>Tue, 21 Jun 2011 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2011-06-21-uninstall-all-gems/</guid><description>From time to time I need to uninstall all my gems within RVM gemset. I googled a nice command for this:
# gem list | cut -d" " -f1 | xargs gem uninstall -aIx
Then I usually go for:
# gem install bundler &amp;&amp; bundle install
Easy peasy. Kudos to geekystuff.net. Thanks.</description></item><item><title>Jak se efektivně naučit Ruby</title><link>https://blog.zapletalovi.com/posts/2011-01-29-jak-se-efektivne-naucit-ruby/</link><pubDate>Sat, 29 Jan 2011 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2011-01-29-jak-se-efektivne-naucit-ruby/</guid><description>Už několik týdnů se intenzivně učím jazyk Ruby. Potřebuju ho k výkonu povolání, protože začínám pracovat na některých projektech psaných v Ruby on Rails. Prošmejdil jsem nějaké ty tutoriály, koupil jednu tištěnou knížku která nestála za nic a jednu elektronickou, která je parádní. Ta je ovšem už pro pokročilé. Čím je ale lepší začít?
Pokud už máte předchozí zkušenosti s programováním, vrhněte se do toho po hlavě. Sajta Learn Ruby with the Koans nabízí skvělý způsob.</description></item></channel></rss>