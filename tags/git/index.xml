<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Lukáš Zapletal</title><link>https://blog.zapletalovi.com/tags/git/</link><description>Recent content in git on Lukáš Zapletal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 13 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.zapletalovi.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>The ultimate git hook to prevent push accidents</title><link>https://blog.zapletalovi.com/posts/2022-10-13-the-ultimate-git-hook-to-prevent-push-accidents/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2022-10-13-the-ultimate-git-hook-to-prevent-push-accidents/</guid><description>So you pushed something that you did not mean to, huh? I have a simple solution for that, a global git hook that checks:
A push is not being made into a remote named upstream. A push is made into remote URL containing your username. A push is not being made into branch named main or master. If you still want to push, you can use --no-verify git option to force it.</description></item><item><title>On git master, main and inclusion</title><link>https://blog.zapletalovi.com/posts/2020-06-19-on-git-master-main-and-inclusion/</link><pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2020-06-19-on-git-master-main-and-inclusion/</guid><description>All I can say is that I find some words like whiltelist, blacklist and master/slave awful. I do realize that the context in git might not be racist, however I am trying to be nice-by-default person. I won&amp;rsquo;t comment more on the situation as this blog is strictly non-political. So let&amp;rsquo;s be technical in that regard:
If one of your projects rename master to main and you are having hard time checking out the mainline branch, I have a tip for you:</description></item><item><title>How to remove file from last commit</title><link>https://blog.zapletalovi.com/posts/2018-02-01-how-to-remove-file-from-last-commit/</link><pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2018-02-01-how-to-remove-file-from-last-commit/</guid><description>Happens all the time to me. When I mis-commit a_file.txt the easiest way to revert the change from the last commit can be tricky:
git reset --soft HEAD^ git reset HEAD a_file.txt git commit But I figured out better way today:
git checkout HEAD^ a_file.txt git commit -a --amend That&amp;rsquo;s exactly one command saved plus I don&amp;rsquo;t need to dig the commit message. I know it is possible to reference it via ORIG_HEAD but I never use that and I don&amp;rsquo;t remember.</description></item><item><title>Git auto fetch script I run every day</title><link>https://blog.zapletalovi.com/posts/2017-07-17-git-auto-fetch-script-i-run-every-day/</link><pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2017-07-17-git-auto-fetch-script-i-run-every-day/</guid><description>I am &amp;ldquo;shutdowner&amp;rdquo;, meaning I always shutdown my laptop (now workstation) at the end of the day. I have a script to do that which sleeps 5 seconds (so I can change my mind - e.g. when I dig shell history incorrectly and quickly hit enter - it really happened yeah) and it is simple:
puts my monitors into standby mode applies all OS updates runs duplicity backup on my home folder fetches git repos filesystem sync call fstrim root volume poweroff I learned a trick I want to write about today from colleague of mine Mirek Suchý, but I think he runs it from cron (not a &amp;ldquo;shutdowner&amp;rdquo; guy).</description></item><item><title>Git in Practice slides</title><link>https://blog.zapletalovi.com/posts/2013-03-25-git-in-practice-slides/</link><pubDate>Mon, 25 Mar 2013 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2013-03-25-git-in-practice-slides/</guid><description>This morning, I have talk about Git at the Palacky University in Olomouc. Here are slides I promised to put on my blog.
Honestly, it is not possible to give decent git overview in one hour. It was just a master plan I could not achieve. I tried at least.
Do not forget, the book you want to go for is Pro Git. Available in Czech as, believe me or not, Pro Git.</description></item><item><title>Faster backporting with git, ssh and patch</title><link>https://blog.zapletalovi.com/posts/2013-01-23-faster-backporting-with-git-ssh-and-patch/</link><pubDate>Wed, 23 Jan 2013 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2013-01-23-faster-backporting-with-git-ssh-and-patch/</guid><description>If you wort at Red Hat, be prepared to backport stuff. This is why customers pay us - they want stable releases with fixed bugs. So while working on new features upstream, we also fix bugs in released products.
Interested in working at Red Hat? Contact me! ;-)
More info at: http://jobs.redhat.com
The way we work in our team is to fix everything in the upstream project first (for me this is Katello - www.</description></item><item><title>My Git aliases again</title><link>https://blog.zapletalovi.com/posts/2012-07-30-my-git-aliases-again/</link><pubDate>Mon, 30 Jul 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-07-30-my-git-aliases-again/</guid><description>After more intensive work with git I have defined my own set of aliases that helps me to interact with git every day. Some of them are borrowed from Google, Red Hat folks or others but most of them are my own work. Please note this will only work with Git 1.5+.
This is an updated blog post with some bugs fixed and more commands :-)
# vim: ts=2:et # .</description></item><item><title>Initializing git repo with httpd anon access</title><link>https://blog.zapletalovi.com/posts/2012-07-26-initializing-git-repo-with-httpd-anon-access/</link><pubDate>Thu, 26 Jul 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-07-26-initializing-git-repo-with-httpd-anon-access/</guid><description>Another tutorial how to setup git repository with ssh read-write access and anonymous httpd access. But this time, I want to focus on getting it working on RHEL6 (Fedora should work too). There&amp;rsquo;s one trick I want to record on my blog ;-)
Fist of all, let&amp;rsquo;s configure httpd to serve user directories. My first thought was to create a file in /etc/httpd/conf.d, but this is not working since UserDir option is explicitely turned off.</description></item><item><title>Three-way git merging and meld</title><link>https://blog.zapletalovi.com/posts/2012-06-15-three-way-git-merging-and-meld/</link><pubDate>Fri, 15 Jun 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-06-15-three-way-git-merging-and-meld/</guid><description>You may want to read updated article. Although I am vim-lover, when it comes to git merging I use excellent tool called Meld&amp;nbsp;sometimes. It's a GTK-based application written in Python and it has very nice capabilities of showing diffs. Particularly, I like how Meld shows changes on the same lines (highlighing portions of them), it's editable text pane with source highlighting and ability to visually merge conflicts using arrow icons.</description></item><item><title>Cleanup all merged branches in git</title><link>https://blog.zapletalovi.com/posts/2012-05-29-cleanup-all-merged-branches-in-git/</link><pubDate>Tue, 29 May 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-05-29-cleanup-all-merged-branches-in-git/</guid><description>From time to time, I have been cleaning all merged branches using git branch -d command. I was wondering if I can do this automatically. Guess what. I can do that and it's as easy as:
git branch --merged master | grep -v 'master$' | xargs git branch -d
Adding to my git aliases right away!</description></item><item><title>When github says I cannot merge</title><link>https://blog.zapletalovi.com/posts/2012-04-27-when-github-says-i-cannot-merge/</link><pubDate>Fri, 27 Apr 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-04-27-when-github-says-i-cannot-merge/</guid><description>We are evaluating github for our Katello open-source project. While I like plain git more, I have to say github has pretty convenient merge reviews and it's very fast (Rackspace UK-based datacenters are faster than US-based fedorahosted.org; at least&amp;nbsp;for me).
Anyway, today I hit my very first git conflict during git pull review process. For some time, github shows this very nice Automerge button, but it only works when request can be clearly merged.</description></item><item><title>Git's crying Patch format detection failed</title><link>https://blog.zapletalovi.com/posts/2011-11-30-gits-crying-patch-format-detection/</link><pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2011-11-30-gits-crying-patch-format-detection/</guid><description>If you get the following error message while applying git patch:
$ git am /path/to/0001-My-awesome-change.patch
Patch format detection failed.
It means that the patch was not generated with git format-patch and transmitted correctly. Either ask the contributor to try again using the above patch creation instructions, or apply each patch separately using git apply:
$ git apply --whitespace=fix /path/to/0001-My-awesome-change.patch
$ git commit --author='Contributor Name &amp;lt;contributor@thedomain.com&amp;gt;'
If the patch does not fit, check out older version.</description></item><item><title>How to take a git push back</title><link>https://blog.zapletalovi.com/posts/2011-08-01-how-to-take-git-push-back/</link><pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2011-08-01-how-to-take-git-push-back/</guid><description>Ouch, just pushed something I don't want in my remote git repo. Easy help:
# git reset --hard HEAD~1
# git push origin +master
Oops, I also pushed a tag. Well, it's a git, yea?
# git tag -d MY_TAG
# git push origin :refs/tags/MY_TAG
Use with care.</description></item><item><title>About vim saving me ... awesome</title><link>https://blog.zapletalovi.com/posts/2011-06-22-about-vim-saving-me-awesome/</link><pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2011-06-22-about-vim-saving-me-awesome/</guid><description>I heard it. I read it. I never faced it until today. The world-famous Vim Undo Tree.
Well, just an ordinary day today. I was solving an issue. There are two solutions avaiable. The first is harder to do. I am choosing it! Working hard, but not commiting into my git repo yet. After IRC discussion with my team folks it turns out the second solution is better. All right.</description></item><item><title>My git aliases</title><link>https://blog.zapletalovi.com/posts/2011-04-14-my-git-aliases/</link><pubDate>Thu, 14 Apr 2011 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2011-04-14-my-git-aliases/</guid><description>This article is outdated. Please visit updated git aliases blog post. After more intensive work with git I have defined my own set of aliases that helps me to interact with git every day. Some of them are borrowed from Google, Red Hat folks or others but most of them are my own work. Please note this will only work with Git 1.5+.
pu = pull
pur = pull --rebase</description></item><item><title>Vim, Git a commit message</title><link>https://blog.zapletalovi.com/posts/2010-10-22-vim-git-commit-message/</link><pubDate>Fri, 22 Oct 2010 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2010-10-22-vim-git-commit-message/</guid><description>Vim spolupracuje s Gitem naprosto skvěle. Inu, je to jen textový editor a commit zprávy jsou obyčejné texty. Vim ale umí něco navíc. Sám zjistí, že se jedná o commit message a zapne zvýrazňování syntaxe, které se hodí zejména pokud člověk dělá git rebase -i.
Sedmičková verze Vimu ale vždy po otevření skočí na poslední pozici kuzoru, což je super, ale u commit zpráv je to trochu problém. U Gitu se všechny jmenují stejně (.</description></item><item><title>Skvělá studnice tipů pro git</title><link>https://blog.zapletalovi.com/posts/2010-10-05-skvela-studnice-tipu-pro-git/</link><pubDate>Tue, 05 Oct 2010 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2010-10-05-skvela-studnice-tipu-pro-git/</guid><description> Objevil jsem výbornou studnici rad a tipů pro git. Je jí server GitReady. Tento skvělý zdroj jsem našel dnes, když jsem se pokoušel shromáždit více lokálních komitů do jednoho. Tohle fakt asi nejde přeložit... ;-)</description></item><item><title>Výborné materiály o Gitu</title><link>https://blog.zapletalovi.com/posts/2010-08-25-vyborne-materialy-o-gitu/</link><pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2010-08-25-vyborne-materialy-o-gitu/</guid><description>V poslední době čím dál víc pracuji se systémem správy verzí Git. Začal jsem ho používat pro jeden svůj (zatím tajný) projekt a začínám řešit nějaké ty postupy, které ze jiných systémů (Subversion, Bazaar) neznám. Mimochodem zkouším programovací jazyk Vala a zatím jsem nadšen produktivitou práce.
Na úplný začátek musím uvést odkaz na skvělý crash-course (v angličtině). Stránka podává velmi stručný popis toho, jak začít s Gitem pracovat. Text je velmi užitečný pro uživatele, kteří už znají systém Subversion.</description></item></channel></rss>