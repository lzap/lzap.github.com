<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on Lukáš Zapletal</title><link>http://blog.zapletalovi.com/tags/java/</link><description>Recent content in java on Lukáš Zapletal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 19 Nov 2012 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.zapletalovi.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Want faster Java startups in Fedora?</title><link>http://blog.zapletalovi.com/posts/2012-11-19-want-faster-java-startups-in-fedora/</link><pubDate>Mon, 19 Nov 2012 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2012-11-19-want-faster-java-startups-in-fedora/</guid><description>IBM contributed thing which is called class sharing. The thing is simple, you generate class cache which is then used when Java is starting up (and also shared across JVMs). Startups are faster.
How to use this (pretty old) feature? You re loking for -Xshare option:
$ java -X 2&amp;gt;&amp;amp;1 | grep share -Xshare:off do not attempt to use shared class data -Xshare:auto use shared class data if possible (default) -Xshare:on require using shared class data, otherwise fail.</description></item><item><title>Elluminate, OpenJDK and PulseAudio</title><link>http://blog.zapletalovi.com/posts/2011-08-01-elluminate-openjdk-and-pulseaudio/</link><pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2011-08-01-elluminate-openjdk-and-pulseaudio/</guid><description>I was constantly having sound issues with Elluminate after my upgrade to Fedora 15. The audio had recurring silent pauses about one second long. It was driving me crazy when I was watching recorded sessions (for on-line ones we are using tele-bridge).
Today I **saw red**. I was suspecting network, but after a quick audio test (Tools - Audio - Setup Wizard) it turned out its rather java audio issue.</description></item><item><title>Chyba v Javě umožňuje DoS útoky</title><link>http://blog.zapletalovi.com/posts/2011-02-03-chyba-v-jave-umoznuje-dos-utoky/</link><pubDate>Thu, 03 Feb 2011 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2011-02-03-chyba-v-jave-umoznuje-dos-utoky/</guid><description>Fatální chyba v implementaci Javy (postižená je Java od Oracle stejně jako OpenJDK) zapříčiní nekonečnou smyčku, pakliže se JVM pokusí přečíst číslo 2.2250738585072012e-308. Škodlivý kód je velmi jednoduché vytvořit:
class runhang {
public static void main(String[] args) {
System.out.println("Test:");
double d = Double.parseDouble("2.2250738585072012e-308");
System.out.println("Value: " + d);
}
}
Tento program se zastaví na druhém řádku, kde se parsuje číslo, a nikdy neskončí. Není to "nic moc". Chyba musí být bleskurychle opravena.</description></item><item><title>Recenze IntelliJ IDEA 10 a soutěž o ceny</title><link>http://blog.zapletalovi.com/posts/2010-12-18-recenze-intellij-idea-10-soutez-o-ceny/</link><pubDate>Sat, 18 Dec 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-12-18-recenze-intellij-idea-10-soutez-o-ceny/</guid><description>Na serveru LinuxEXPRES v pátek vyšla recenze nové verze programovacího prostředí IntelliJ IDEA včetně soutěže o dvě licence na variantu Ultimate. Otázky a odpovědní formulář jsou ve článku. Přeji hodně štěstí.</description></item><item><title>IntelliJ IDEA a OpenJDK</title><link>http://blog.zapletalovi.com/posts/2010-09-16-intellij-idea-openjdk/</link><pubDate>Thu, 16 Sep 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-09-16-intellij-idea-openjdk/</guid><description>Pokud by snad někdo chtěl provozovat vývojové prostředí IntelliJ IDEA na OpenJDK, tak mám malou radu. Nedělejte to. Program se chová nestandardně, některé funkce jsou zcela nedostupné, občas obdržíte oznámení o pádu (program však obvykle "drží") a vše je opravdu (ale *opravdu*) hodně pomalé. Ne nadarmo podpora společnosti JetBrains nabádá k používání oficiální Javy od Oracle. Uff. Nějak mi to ještě stále nejde "do huby" ;-)
A jak zjistit, že máte tu správnou Javu?</description></item><item><title>Oracle žaluje Google za zneužívání Javy při vývoji Android OS</title><link>http://blog.zapletalovi.com/posts/2010-08-15-oracle-zaluje-google-za-zneuzivani-javy/</link><pubDate>Sun, 15 Aug 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-08-15-oracle-zaluje-google-za-zneuzivani-javy/</guid><description>A je to tady. Oracle se rozhodl vytřískat maximum z akvizice společnosti Sun Microsystems a v cca 18-ti stránkovém dokumentu žaluje Google za zneužívání technologie Java při vývoji aplikací pro Android.
Tučně jsem uvedl "při vývoji", protože Oracle, Google i celý svět ví, že v Androidu není ani řádek kódu z Javy (Core API). Ba ani Java samotná (JVM) v Androidu není. Google se již od začátku pojistil a Javu do Androidu nedal.</description></item><item><title>Opožděná inicializace singletonu v Javě</title><link>http://blog.zapletalovi.com/posts/2010-07-13-pomala-inicializace-singletonu-v-jave/</link><pubDate>Tue, 13 Jul 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-07-13-pomala-inicializace-singletonu-v-jave/</guid><description>Na Wikipedii jsem našel zajímavé řešení návrhového vzoru singleton v Javě. Obecně se nepovažuje za nejšťastnější vytvářet novou instanci opožděně (lazy init) v konstruktoru a doporučuje se statickou inicializací. Když už potřebujete opožděnou inicializaci, tak je vhodné provést to vláknově bezpečnou metodou.
public class Singleton {
// volatile is needed so that multiple thread can reconcile the instance
private volatile static Singleton singleton;
private Singleton(){}
// synchronized keyword has been removed from here</description></item><item><title>Jazyk Vala - lepší Java</title><link>http://blog.zapletalovi.com/posts/2010-05-19-jazyk-vala-lepsi-java/</link><pubDate>Wed, 19 May 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-05-19-jazyk-vala-lepsi-java/</guid><description>Jazyk Vala bude zřejmě další programovací jazyk, který se naučím po večerech, nebo když mě nebude bavit program běžící v TV. Naposledy jsem si přečetl knížku o jazyku Scala, který se překládá do Java bytekódu a ke svému běhu tedy potřebuje runtime Javy. Docela nedávno jsem se pak díval na dílko společnosti Google -- jazyk Go. Příliš se mi ale nezalíbil.
Vala má docela hodně společných rysů právě s jazykem Go od Googlu.</description></item><item><title>Linux na desktopu se blíži (Stay Tuned)</title><link>http://blog.zapletalovi.com/posts/2010-04-25-linux-na-desktopu-se-blizi-stay-tuned/</link><pubDate>Sun, 25 Apr 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-04-25-linux-na-desktopu-se-blizi-stay-tuned/</guid><description>Podle testů na Phoronixu je Java na Linuxu rychlejší, než na Windows. Konkrétně se jednalo o Ubuntu Linux a Windows Vista Premium SP1. Ačkoli jsem si myslel spíše opak, test prokázal nejen to, že je Linux celkově rychlejší. Velmi zajímavý jsou rozdíly, o které Linux porazil Windows. Jsou to desítky procent.
Systém Windows vyhrál jen jediný test -- test grafického 2D výstupu. To redaktoři z Phoronixu zdůvodňují nekvalitním ovladačem pro grafiku Intel v testované verzi (8.</description></item><item><title>Selection buffer Eclipse OpenGL plugin</title><link>http://blog.zapletalovi.com/posts/2010-04-23-selection-buffer-eclipse-opengl-plugin/</link><pubDate>Fri, 23 Apr 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-04-23-selection-buffer-eclipse-opengl-plugin/</guid><description>Eclipse experimental OpenGL plugin ve verzi 0.5.0 bohužel již neobsahuje metody pro manipulaci s nativní pamětí. Tyto jsou však nutné pro GL selection režim. Jelikož jej v diplomové práci potřebuji, vytvořil jsem plugin, který se dodá k originálnímu pluginu od Eclipse (http://www.eclipse.org/swt/opengl/). K dispozici je pak třída SelectionBuffer, která poskytuje kýžené metody tolik potřebné pro výběr oběktů.
This is plugin for Eclipse 3.X with class called SelectionBuffer. It provides methods for accessing native memory buffer which is needed for using OpenGL selection mode.</description></item></channel></rss>