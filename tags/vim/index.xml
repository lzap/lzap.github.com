<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vim on Lukáš Zapletal</title><link>http://blog.zapletalovi.com/tags/vim/</link><description>Recent content in vim on Lukáš Zapletal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 10 Dec 2012 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.zapletalovi.com/tags/vim/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim use case - fast edit in buffers</title><link>http://blog.zapletalovi.com/posts/2012-12-10-vim-use-case-fast-edit-in-buffers/</link><pubDate>Mon, 10 Dec 2012 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2012-12-10-vim-use-case-fast-edit-in-buffers/</guid><description>My second topic has something do to with workflow I use everyday. I often need to edit a file(s), commit to git (usually amending the last one), build and install a package and test it. Often when I am trying my patch that fixes some bug or something.
I use tabs when doing regular feature coding. Tabs are great feature of Vim and works pretty well, but they do not play very well with many files opened.</description></item><item><title>HTML and XHTML built in support in Vim</title><link>http://blog.zapletalovi.com/posts/2012-08-20-html-and-xhtml-built-in-support-in-vim/</link><pubDate>Mon, 20 Aug 2012 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2012-08-20-html-and-xhtml-built-in-support-in-vim/</guid><description>For some reason, everytime I read something about Vim and (X)HTML support, guys are referring to many weird plugins and extra tools, which is often outdated.
Many folks do not know, that Vim 7+ has decent support for XML/XHTML/HTML languages (no plugins needed!) with possibilities to extend it with any XML-based language you want. What you can do is to use DTD/RNG converters that prepares Vim definition which is used to give you omni completion.</description></item><item><title>Three-way git merging and meld</title><link>http://blog.zapletalovi.com/posts/2012-06-15-three-way-git-merging-and-meld/</link><pubDate>Fri, 15 Jun 2012 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2012-06-15-three-way-git-merging-and-meld/</guid><description>You may want to read updated article. Although I am vim-lover, when it comes to git merging I use excellent tool called Meld&amp;nbsp;sometimes. It's a GTK-based application written in Python and it has very nice capabilities of showing diffs. Particularly, I like how Meld shows changes on the same lines (highlighing portions of them), it's editable text pane with source highlighting and ability to visually merge conflicts using arrow icons.</description></item><item><title>Reformat vs reindent in Vim</title><link>http://blog.zapletalovi.com/posts/2011-10-27-reformat-vs-reindent-in-vim/</link><pubDate>Thu, 27 Oct 2011 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2011-10-27-reformat-vs-reindent-in-vim/</guid><description>When I see questions about Vim and reformatting and reindenting, I usually feel confusion. But it is pretty easy.
Reindenting, done with = key, is a process of shifting line indetation without inserting any line ends - no hard wrapping. Simply put, beginning columns of the selected lines can change, but the content cannot.
On the other hand, reformatting is complete rewrite of a selected piece of code. Simply put, everything is deleted and written again according to the language rules defined in Vim.</description></item><item><title>About vim saving me ... awesome</title><link>http://blog.zapletalovi.com/posts/2011-06-22-about-vim-saving-me-awesome/</link><pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2011-06-22-about-vim-saving-me-awesome/</guid><description>I heard it. I read it. I never faced it until today. The world-famous Vim Undo Tree.
Well, just an ordinary day today. I was solving an issue. There are two solutions avaiable. The first is harder to do. I am choosing it! Working hard, but not commiting into my git repo yet. After IRC discussion with my team folks it turns out the second solution is better. All right.</description></item><item><title>Vim plugin který musíte mít - Komand Tý</title><link>http://blog.zapletalovi.com/posts/2011-01-29-vim-plugin-ktery-musite-mit-komand-ty/</link><pubDate>Sat, 29 Jan 2011 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2011-01-29-vim-plugin-ktery-musite-mit-komand-ty/</guid><description>Vím, není Štědrý večer. Pro Vim ale ano. Trošku si totiž dneska "hraju". Tuním. Piju. Nespím.
Jestli používáte Vim intenzivněji, možná už máte ten "svůj" způsob otevírání souborů. Mě se osvědčil příkaz :find ve spolupráci s nastavením :set path na aktuální adresář (tedy projekt). Mám nabindované sady kláves pro otevírání souborů ve splitu (horizontál, vertikál) a tabu. Asi klasika, kterou zná každý vimař.
Na podobném způsobu funguje plugin CommandT, ale všechno to tak nějak dotahuje k dokonalosti.</description></item><item><title>Pořádek v nastavení vimu pomocí pluginu Pathogen</title><link>http://blog.zapletalovi.com/posts/2011-01-28-poradek-v-nastaveni-vimu-pomoci-pluginu/</link><pubDate>Fri, 28 Jan 2011 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2011-01-28-poradek-v-nastaveni-vimu-pomoci-pluginu/</guid><description>Vim asi používáte všichni. V podstatě z nám jen jednoho člověka, který Vim zatím nepoužívá, ale dost vážně o tom uvažuje. Tolik na úvod.
S přibývajícími zkušenostmi s tímto špičkovým editorem začíná člověk po internetu honit různé pluginy a jiné vychytávky. Instalují se obvykle rozbalením do adresáře ~/.vim, případně rozbalením .vba (to není visual basic ale vimball archiv). Takový vimball se rozbalí přímo ve Vimu příkazem :so. To jsou dva způsoby instalace s téměř stejným výsledkem, a totiž nevalným.</description></item><item><title>Odsazování (indenting) XML ve Vimu</title><link>http://blog.zapletalovi.com/posts/2010-11-29-odsazovani-indenting-xml-ve-vimu/</link><pubDate>Mon, 29 Nov 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-11-29-odsazovani-indenting-xml-ve-vimu/</guid><description>Na internetu existuje nepřeberné množství "tipů", jak lze formátovat XML (XHTML, HTML) kód pomocí programu xmllint a možnosti "protáhnout" buffer Vimu externím programem. Já sám mám také namapovanou klávesu F5 na tuto "vychytávku":
$ cat .vim/ftplugin/xml.vim Příliš často tuto možnost však nepoužívám. Bloggeři kteří toto doporučují jako jediné možné řešení dotiž zapomínají, že Vim dokáže odsadit XML i HTML sám od sebe - potřebná pravidla jsou již v základním instalačním balíčku.</description></item><item><title>Vim, Git a commit message</title><link>http://blog.zapletalovi.com/posts/2010-10-22-vim-git-commit-message/</link><pubDate>Fri, 22 Oct 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-10-22-vim-git-commit-message/</guid><description>Vim spolupracuje s Gitem naprosto skvěle. Inu, je to jen textový editor a commit zprávy jsou obyčejné texty. Vim ale umí něco navíc. Sám zjistí, že se jedná o commit message a zapne zvýrazňování syntaxe, které se hodí zejména pokud člověk dělá git rebase -i.
Sedmičková verze Vimu ale vždy po otevření skočí na poslední pozici kuzoru, což je super, ale u commit zpráv je to trochu problém. U Gitu se všechny jmenují stejně (.</description></item><item><title>Konfigurace pro Vim na dietě</title><link>http://blog.zapletalovi.com/posts/2010-08-26-konfigurace-pro-vim-na-diete/</link><pubDate>Thu, 26 Aug 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-08-26-konfigurace-pro-vim-na-diete/</guid><description>V noci na dnešek jsem si dal tu práci a během upgradu na Vim 7.3 jsem výrazně zredukoval svoji konfiguraci. Ta se smrskla z nějakých 42 MB na pouhých 31 MB. Doslova jsem řádil a vyházel všechno, co už nepoužívám. Zbylo v podstatě torzo - moje hlavní konfigurace, pár barevných schémat a slovníky na kontrolu pravopisu (čeština, angličtina - kódování ISO88592 a UTF8).
Zároveň jsem přesunul repozitář s konfigurací ze soukromého FTP serveru (Bazaar) na Github (GIT).</description></item><item><title>Pěkný kabátek pro nový Vim 7.3</title><link>http://blog.zapletalovi.com/posts/2010-08-24-pekny-kabatek-pro-novy-vim-73/</link><pubDate>Tue, 24 Aug 2010 00:00:00 +0000</pubDate><guid>http://blog.zapletalovi.com/posts/2010-08-24-pekny-kabatek-pro-novy-vim-73/</guid><description>Pokud si myslíte, že máte rychlý počítač i kvalitní prohlížeč, zkuste si vybrat to nejlepší barevné schéma pro editor Vim, které je k dispozici. Prostě klikněte na odkaz. Pozor! Stránka pod odkazem je dlouhá a náročná na procesor počítače :-)
V neděli odpoledne středoevropského času vydal Bram Moolenar novou verzi editoru Vim 7.3. Novinek tentokrát moc není, jedná se zejména o velkou sadu oprav a záplat. Jak on sám píše v oznámení, od poslední verze uplynuly nějaké dva roky a oprav se nahromadilo hodně.</description></item></channel></rss>