<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>systemtap on Luk치코 Zapletal</title><link>https://blog.zapletalovi.com/tags/systemtap/</link><description>Recent content in systemtap on Luk치코 Zapletal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Aug 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.zapletalovi.com/tags/systemtap/index.xml" rel="self" type="application/rss+xml"/><item><title>Probing Ruby 2.0 apps with SystemTap in RHEL7</title><link>https://blog.zapletalovi.com/posts/2016-08-02-probing-ruby-20-apps-with-systemtap-in-rhel7/</link><pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2016-08-02-probing-ruby-20-apps-with-systemtap-in-rhel7/</guid><description>Few years ago, I wrote an article about SystemTap and Ruby in RHEL6. When RHEL 7.0 was released, things changed. It has Ruby 2.0 and the Ruby SystemTap API changed as well, therefore I am updating my old article today according to new changes.
Imagine you have a Ruby application that has some performance issues on a production server and it&amp;rsquo;s running RHEL 7.0 or newer. With SystemTap, you can easily peek into the running application and investigate bottlenecks or count memory objects.</description></item><item><title>SystemTap as a system wide strace tool</title><link>https://blog.zapletalovi.com/posts/2014-05-16-systemtap-as-a-system-wide-strace-tool/</link><pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2014-05-16-systemtap-as-a-system-wide-strace-tool/</guid><description>I needed to find a process that was searching for several file patterns. I could use strace tool but since this one was a Apache2 module, I would need to hack startup scripts and probably create a wrapper script. There was another way of doing that - using SystemTap.
My problem was simple - I wanted to see process name, pid and full absolute path for a filename pattern. The goal was set, with little bit of googling, I was able to write this (not ideal and hacky) SystemTap script:</description></item><item><title>Setup a SystemTap permission change trap</title><link>https://blog.zapletalovi.com/posts/2012-04-17-setup-systemtap-permission-change-trap/</link><pubDate>Tue, 17 Apr 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-04-17-setup-systemtap-permission-change-trap/</guid><description>We were investigating issue today - something - some process - have changed permission of a very important file in one of our Katello testing installations. We only know it happened over the night. The task is to catch the instigator. We can use SystemTap for that. Prepare our environment:
yum -y install systemtap systemtap-runtime kernel-debuginfo-`uname -r` kernel-debuginfo-common-`uname -i`-`uname -r` kernel-devel-`uname -r`
Our target file will be /test:
touch /test</description></item><item><title>Peek into your Ruby app with SystemTap</title><link>https://blog.zapletalovi.com/posts/2012-02-02-peek-into-your-ruby-app-with-systemtap/</link><pubDate>Thu, 02 Feb 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-02-02-peek-into-your-ruby-app-with-systemtap/</guid><description>I already wrote about using SystemTap with Ruby. Today I want to extend the last example I linked at the very end of my article. It's a nice example script of Ruby "top" utility.
Today I was investigating our Katello unit test codebase. We have over 1600 examples and the number is rising every day. The whole run is about seven minutes long. The utility gives very nice first look on the app showing the top Ruby calls.</description></item><item><title>Probing Ruby apps with SystemTap in RHEL 6</title><link>https://blog.zapletalovi.com/posts/2012-01-05-probing-ruby-apps-with-systemtap-in/</link><pubDate>Thu, 05 Jan 2012 00:00:00 +0000</pubDate><guid>https://blog.zapletalovi.com/posts/2012-01-05-probing-ruby-apps-with-systemtap-in/</guid><description>There is one small'n'hidden feature of RHEL 6.2 that popped up recently as an enhancement errata (RHSA-2011-1581). With this update, SystemTap probes have been added to the Ruby package. I was waiting for this feature, because at the time I was reading Aaron Patterson's excelent articleabout Ruby probing, this was not possible in Fedora or Red Hat Enterprise Linux by default. I mean without compilation and installation of DTrace or SystemTap.</description></item></channel></rss>