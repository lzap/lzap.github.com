---
layout: post
title: "A sane vim configuration for Fedora"
date: 2021-11-11
tags:
- linux
- fedora
---
{{ page.title }}
================

I use vim on everyday basis from 1997 or something like that. My configuration
is quite old, clunky, contains things for DOS and Windows even and I should
have totally cleaned it up. It still works fine, however, recent reinstallation
of my Fedora laptop brought me to the idea to start a new Vim configuration
from scratch.

I am not huge fan of heavily-customized Vim configs. Those configurations you
can find in many blogposts, youtube videos or github config repositories. Thing
is, when you login to a server that has a "vanilla" vim, things can be hard for
people who got used to the custom plugins and other fancy stuff.

For this reason, I've decided to come up with a "sane" Vim configuration.
Minimum possible configuration changes and only plugins which ship with Fedora
34+. Here it is.

If you want to check this out, install Vi, make it the default editor, install
the enhanced package (provides `vim`) and some plugins:

    dnf install -y vim-default-editor \
      vim-enhanced \
      vim-powerline \
      vim-syntastic \
      vim-trailing-whitespace \
      vim-fugitive \
      vim-ctrlp \
      ctags

A quick overview what I consider a good plugin set:

* ctrlp - smallest possible fuzzy-finder plugin (pure Vimscript)
* fugitive - a must have tool for git
* trailing-whitespace - shows and fixes, well, trailing whitespace
* powerline - one of the two "fancy" status lines
* syntastic - excellent plugin that highlights typos or syntax errors after save

There are other fuzzy-finder plugins like Command-T or my faviourite (very
fast) fzf.vim. Thing is, fzf is not in Fedora and I want the smallest possible
configuration. CtrlP will do just fine, although, it might be slower on large
projects. In that case I recommend `fzf`.

The default Vim configuration then becomes:

    cat ~/.vimrc
    " load per-project setting from .vimrc
    set exrc
    set secure
    " map leader to comma and comma-comma to CtrlP
    let mapleader=","
    let g:ctrlp_map = '<leader><leader>'
    " leader + b/t/f/m for more functions
    nnoremap <leader>b :CtrlPBuffer<cr>
    nnoremap <leader>t :CtrlPTag<cr>
    nnoremap <leader>f :CtrlPBufTag<cr>
    nnoremap <leader>m :CtrlPMRU<cr>
    " leader g to generate ctags
    nnoremap <leader>g :!ctags -R .<cr><cr>

If you think this is very minimalistic, well, it is because I basically need
few things:

* Having my leader key mapped to comma instead of the default backslash. It is
the closest free key in Vim when your hands are in writing position. Also this
key is same in most keyboard layouts while `\` varies per model or layout.

* Leader-leader (comma pressed twice) to open CtrlP fuzzy file finder. Much
faster than Ctrl-P or Ctrl-T, also these are already important Vim keybindings
I do not want to override!

* Leader b/t/f/m to open list of buffers, tags, tags from current file and most
recently used files. These are extremely useful features of CtrlP (or
similar) plugins!

* Leader-g to generate ctags file for better navigation. Ctags supports
 hundreds of languages and Vim can use all this knowledge to navigate it.

* Being able to override any other setting in projects by creating `.vimrc`
file. The idea is to put this into (global) `.gitignore` and have a unique
setup per git repository.

I find CtrlP (or fzf.vim or Command-T) very useful not only for opening files,
but also for browsing buffers and tags. This is very often overlooked features
of these plugins while it can bring huge benefits on the table.

Such a project `.vimrc` could be something like (for C/C++ project with GNU
Makefile):

    " coding style
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4
    set noexpandtab
    " include and autocomplete path
    let &path.="/usr/local/include"
    " function keys to build and run the project
    nnoremap <F1> :wall!<CR>:make!<cr><cr>
    nnoremap <F2> :!LD_LIBRARY_PATH=/usr/local/lib ./project<cr><cr>

As you can see, I typically map F1-F12 keys to compile, run, test and similar
actions. These are all free keys in Vim, well, except F1 which is help. I don't
need help, not that I would already know everything about Vim. Not at all. But
I can simply type `:help` if needed.

It is a good idea to ignore both `.vimrc` and `tags` (generated by `ctags`)
globally so there is no need to update every each `.gitignore`:

    git config --global core.excludesfile ~/.gitignore
    cat ~/.gitignore
    /.vimrc
    /tags
    /TAGS

Now, getting familiar with `ctags` is a key thing to be successful with Vim.
This tool supports hundreds of languages and it can easily create tags for
files you do not want to create, therefore I suggest to ignore typical junk
directories:

    cat ~/.ctags.d/local.ctags
    --recurse=yes
    --exclude=.git
    --exclude=BUILD
    --exclude=.svn
    --exclude=*.js
    --exclude=vendor/*
    --exclude=node_modules/*
    --exclude=db/*
    --exclude=log/*
    --exclude=test/*
    --exclude=tests/*
    --exclude=\*.min.\*
    --exclude=\*.swp
    --exclude=\*.bak
    --exclude=\*.pyc
    --exclude=\*.class
    --exclude=\*.sln
    --exclude=\*.csproj
    --exclude=\*.csproj.user
    --exclude=\*.cache
    --exclude=\*.dll
    --exclude=\*.pdb

There you have it, maybe this can help you navigating through the rich world of
Vim. My advice is: do not use ton of plugins, learn "vanilla" Vim. It is a VERY
capable editor.
